'use strict';

/*
Do not edit this file.
*/

var app = angular.module('myApp', ['myApp.controllers', 'ngMockE2E', 'myApp.showDate']);

//add 700ms delay to $httpBackend responses
app.config(function($provide) {
	$provide.decorator('$httpBackend', function($delegate) {
		var proxy = function(method, url, data, callback, headers) {
			var interceptor = function() {
				var _this = this,
					_arguments = arguments;
				setTimeout(function() {
					callback.apply(_this, _arguments);
				}, 700);
			};
			return $delegate.call(this, method, url, data, interceptor, headers);
		};
		for(var key in $delegate) {
			proxy[key] = $delegate[key];
		}
		return proxy;
	});
});

app.run(function($httpBackend) {
	//init
	var nextUniqueId = 0;
	var users = [];
	for (var i = 0; i < 10; i++) {
		users.push({
			id: nextUniqueId,
			name: 'userName' + nextUniqueId
		});
		nextUniqueId++;
	}

	//GET /api/users
	$httpBackend.whenGET('/api/users').respond(function() {
		return [200, users, {}];
	});

	//POST /api/users
	$httpBackend.whenPOST('/api/users').respond(function(method, url, data) {
		var user = angular.fromJson(data);
		if (user && user.name && user.name.length > 0) {
		  var newUser = {
  			id: nextUniqueId++,  // increments and assigns at same time.  handy.
  			name: user.name
		  };
  		users.push(newUser);
			return [200, newUser, {}];
		} else {
			return [400, 'A user name was not specified.', {}];
		}
	});

	//PUT /api/users/{userId}
	$httpBackend.whenPUT(/\/api\/users\/[0-9]+/).respond(function(method, url, data) {
		var id = url.substring('/api/users/'.length);

		for (var i = 0; i < users.length; i++) {
			if (users[i].id == id) {
			  var name = angular.fromJson(data).name;
			  if (name.length > 0) {
          users[i].name = name;
          return [200, users[i], {}];
			  } else {
          return [400, 'A user name was not specified.', {}]; 
        }
			}
		}

		return [400, 'Invalid user id.', {}];
	});

  //DELETE /api/users/{userId}
	$httpBackend.whenDELETE(/\/api\/users\/[0-9]+/).respond(function(method, url, data) {
		var id = url.substring('/api/users/'.length);

		var count = users.length;
		users = users.filter(function(user) {
			return user.id != id;
		});
		if (users.length == count - 1) {
			return [200, '', {}];
		} else {
			return [400, 'Invalid user id.', {}];
		}
	});
});

